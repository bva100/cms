<?php

namespace Cms\CoreBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * mediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class mediaRepository extends DocumentRepository {

    public function findBySiteIdAndIds($siteId, $ids)
    {
        return $this->createQueryBuilder()
            ->field('siteId')->equals($siteId)
            ->field('id')->in($ids)
            ->getQuery()->execute();
    }

    public function findAllBySiteId($siteId, array $params = array(), array $options = array(), $count = false)
    {
        extract($this->getDefaultOptions($options));
        $qb = $this->createQueryBuilder()
            ->field('siteId')->equals($siteId);
        $qb = $this->addParametersToQuery($qb, $params);
        if ( $count ){
            return $qb->getQuery()->execute()->count();
        }
        return $qb->sort($sortBy, $sortOrder)->skip($offset)->limit($limit)->getQuery()->execute();
    }

    public function getDefaultOptions(array $options)
    {
        if ( ! isset($options['limit']) ){
            $options['limit'] = 10;
        }
        if ( ! isset($options['offset']) ){
            $options['offset'] = 0;
        }
        if ( ! isset($options['sortBy']) ){
            $options['sortBy'] = 'created';
        }
        if ( ! isset($options['sortOrder']) ){
            $options['sortOrder'] = 'desc';
        }
        return $options;
    }

    public function addParametersToQuery($qb, array $params)
    {
        extract($params);
        if ( isset($type) ){
            $qb->field('mime')->equals(new \MongoRegex($type.'.*/'));
        }
        if ( isset($createdAfter) ){
            $qb->field('created')->gte((int)$createdAfter);
        }
        if ( isset($createdBefore) ){
            $qb->field('created')->lte((int)$createdBefore);
        }
        if ( isset($association) )
        {
            if ( $association === 'unattached' )
            {
                $qb->addOr($qb->expr()->field('nodeIds')->equals(null));
                $qb->addOr($qb->expr()->field('nodeIds')->size(0));
            }
        }
        if ( isset($search) )
        {
            $qb->field('metadata.title')->equals(new \MongoRegex('/.*'.$search.'.*/i'));
        }
        return $qb;
    }

    public function findAllBySiteIdAndType($siteId, $type, array $params = array('offset' => 0, 'limit' => 20, 'sort' => array('by' => 'created', 'order' => 'desc')))
    {
        $qb = $this->createQueryBuilder()
            ->field('siteId')->equals($siteId);
        if ( isset($type) )
        {
            $qb->field('mime')->equals(new \MongoRegex($type.'.*/'));
        }
        if ( isset($params['startDate']) )
        {
            $qb->field('created')->gte((int)$params['startDate']);
        }
        if ( isset($params['endDate']) )
        {
            $qb->field('created')->lte((int)$params['endDate']);
        }
        if ( isset($params['association']) )
        {
            if ( $params['association'] === 'unattached' )
            {
                $qb->addOr($qb->expr()->field('nodeIds')->equals(null));
                $qb->addOr($qb->expr()->field('nodeIds')->size(0));
            }
        }
        if ( isset($params['search']) )
        {
           $qb->field('metadata.title')->equals(new \MongoRegex('/.*'.$params['search'].'.*/i'));
        }
        return $qb->sort($params['sort']['by'], $params['sort']['order'])->skip($params['offset'])->limit($params['limit'])->getQuery()->execute();
    }

}